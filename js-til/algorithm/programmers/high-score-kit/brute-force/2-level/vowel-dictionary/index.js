// 모음을 정의합니다.
const VOWELS = ['A', 'E', 'I', 'O', 'U'];

// 각 자리에서 다음 단어로 넘어가기 위해 필요한 단어 수를 정의합니다.
/**
 * 단어의 각 자리는 'A', 'E', 'I', 'O', 'U' 중 하나의 문자가 들어갈 수 있으며, 
 * 길이는 최대 5입니다. 따라서, 특정 자리의 다음 단어까지 몇 개의 단어가 있는지 계산해 봅시다.

  자리수에 따른 단어 수 계산
  우리가 다루는 것은 5개의 자리(A, E, I, O, U)와 각 자리에서 가능한 모든 조합입니다. 예를 들어:

  첫 번째 자리만 고려하면 가능한 단어는 5개 (A, E, I, O, U)입니다.
  두 번째 자리까지 고려하면 가능한 단어는 5 * 5 = 25개입니다.
  세 번째 자리까지 고려하면 가능한 단어는 5 * 5 * 5 = 125개입니다.
  네 번째 자리까지 고려하면 가능한 단어는 5 * 5 * 5 * 5 = 625개입니다.
  다섯 번째 자리까지 고려하면 가능한 단어는 5 * 5 * 5 * 5 * 5 = 3125개입니다.
  우리는 여기서 각 자리에서 다음 단어로 넘어가기 위한 거리를 계산합니다.

  Steps 배열 계산
  각 자리에서 다음 자리로 넘어가기 위해 필요한 단어의 수를 계산하기 위해서는 역순으로 생각해야 합니다. 즉, 가장 오른쪽 자리부터 시작해서 왼쪽으로 갑니다.

  다섯 번째 자리는 바로 다음 단어로 넘어가기 위해서는 1개의 단어만 필요합니다. 따라서 steps[4] = 1
  네 번째 자리에서 다음 단어로 넘어가기 위해서는 다섯 번째 자리의 모든 경우의 수인 5개의 단어가 필요합니다. 따라서 steps[3] = 5 * 1 = 5
  세 번째 자리에서 다음 단어로 넘어가기 위해서는 네 번째 자리의 모든 경우의 수인 5 * 5 = 25개의 단어가 필요합니다. 따라서 steps[2] = 5 * 5 = 25
  두 번째 자리에서 다음 단어로 넘어가기 위해서는 세 번째 자리의 모든 경우의 수인 5 * 25 = 125개의 단어가 필요합니다. 따라서 steps[1] = 5 * 25 = 125
  첫 번째 자리에서 다음 단어로 넘어가기 위해서는 두 번째 자리의 모든 경우의 수인 5 * 125 = 625개의 단어가 필요합니다. 따라서 steps[0] = 5 * 125 = 625
  하지만, 우리의 목표는 총 몇 번째 단어인지를 계산하는 것이므로, 각 자리에서 총 몇 번째 단어인지를 계산하기 위해서는 앞선 자리까지 포함한 값을 고려합니다. 따라서 실제로 steps는 다음과 같습니다:

  다섯 번째 자리에서의 steps는 1 (steps[4] = 1)
  네 번째 자리에서의 steps는 1 + 5 = 6 (steps[3] = 1 + 5 = 6)
  세 번째 자리에서의 steps는 6 + 25 = 31 (steps[2] = 6 + 25 = 31)
  두 번째 자리에서의 steps는 31 + 125 = 156 (steps[1] = 31 + 125 = 156)
  첫 번째 자리에서의 steps는 156 + 625 = 781 (steps[0] = 156 + 625 = 781)
 */
const STEPS = [781, 156, 31, 6, 1];

// 주어진 단어에서 각 문자의 인덱스를 구합니다.
export function getVowelIndex(char) {
  return VOWELS.indexOf(char);
}

// 주어진 단어가 몇 번째 단어인지를 계산합니다.
export function calculateWordIndex(word) {
  let index = 0;
  for (let i = 0; i < word.length; i++) {
    const pos = getVowelIndex(word[i]);
    index += pos * STEPS[i] + 1; // 각 자리에서의 위치를 STEPS로 곱하고, 1을 더해 더합니다.
  }
  return index;
}

// 최종 solution 함수
export function solution(word) {
  return calculateWordIndex(word);
}
